Statement & *PreparedStatement 차이점

미묘한 차이가 있다.
1. PreparedStatement 는 ? 를 사용하여 문장을 좀더 간결하게 직관적으로 표현 할 수 있다.
2. Statement Connection 의 createStatement() 함수가 사용된다.
3. PreparedStatement 은 set() 함수가 사용된다. 정수일 경우 setInt()를 사용한다.
4. executeUpdate() 함수를 호출할때 Statement는  sql문을 입력 파라미터로 전달하고
   PreparedStatement 는 executeUpdate()함수 만 호출한다.
<Statement>

String sql = "INSERT INTO user(id, pw , name) VALUES
			('"+ uid+"','"+ upass+"','"+uname+"')";
Statement stmt = conn.createStatement();
stmt.executeUpdate(sql);

<PreparedStatement>

String sql = "INSERT INTO user(id, pw, name) VALUES(?,?,?)";
PreparedStatement pstmt = conn.preparedStatement(sql);
	pstmt.setString(1,uid);
	pstmt.setString(2,upw);
	pstmt.setString(3,uname);
pstmt.executeUpdate();

데이터베이스 커넥션 풀

왜?

JDBC로 DB에 접급 할때 가장 많은 자원이 소모되는 부분은 DB연동에 필요한  conn 객체를 생성하는 부분이다.
지금까지는 SQL 문을 수행하기 위해서 conn 객체를 생성하고 제거하는 과정을 반복해왔다. 이것은
사이트에 접근하는 유저들이 증가할 경우 시스템의 성능을 급격하게 저하 시키게 된다.

이러한 문제점을 해결하는 방법중의 하나가 바로 database connection pool을 이용하는 방법이다

커넥션 풀을 이용하게 되면 사용자가 요청 할 때마다. 매번 새로운 conn 객체를 생성하는 것이 아니라.
일정한 개수의 conn 객체를 미리 생성한 다음 사용자의 요청이 있을 때 마다 가용한 객체를 할당하는 방식을 사용한다.

WEBContent - META-INF
context.xml = DB연결설정, 아이디, 비번, 사용db 커넥션 갯수, 최소 유지수... 등등 기본설정.

Java Resources - src - util
ConnectionPool.java - 실제 연결 구현.





-------------------------context.xml------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<Context>					//설정시작
	<Resource name="jdbc/dantalk"  //자원 정의 DB명을 넣어준다.
		auth = "Container"
		type = "javax.sql.DataSource"
		driverClassName="com.mysql.jdbc.Driver"
		url = "jdbc:mysql://localhost:3306/dantalk?serverTimezone=UTC"
		username = "root"  //데이터 베이스 아이디
		password = "0000"  //데이터 베이스 비번
		maxTotal = "16"	   //커넥션 풀에서 유지될 수 있는 conn 객체의 최대 개수
		maxIdle = "4"      //커넥션 풀에서 유지 되어야 할  conn 객체의 최소 개수
		maxWaiteMillis = "-1"/> //커넥션 풀에서 가용한 conn 객체가 없을경우 대기시간 지정
								-1로 설정하면 대기시간 없이 바로 가용자원이 없음을 알려주는
								오류메시지가 전달된다.
		
</Context>



-------------------------ConnectionPool.java-------------------------
package util;

import java.sql.*;
import javax.sql.*;
import javax.naming.*;

public class ConnectionPool {
	private static DataSource _ds = null;
	
	public static Connection get() throws NamingException, SQLException{
		if(_ds == null) {
			_ds = (DataSource)(new InitialContext()).lookup(
					"java:comp/env/jdbc/dantalk");
		}
		return _ds.getConnection();
	}
}


-------------------------------------------------------------------------
테이블마다 1개의  DAO (data access object) 와 DTO (data transfer object) 가 필요하다

DAO 모든 sql구문들을 통합
DTO 해당 테이블과 연결을 위한 객체



------------------------------------------------------------------------------------------------
사진올리기
------------------------------------------------------------------------

1. https://commons.apache.org/사이트로 이동 중간즘에 FileUpload zip파일 다운

commons-fileupload-1.4.jar 파일은 lib로 복사

2. https://commons.apache.org/사이트로 이동 중간즘에 IO bin파일 다운

commons-io-2.11.0.jar 파일 lib로 복사후


view  파일 아래에 내용으로 임포트 한다.
<%@ page import = "java.util.*"%>
<%@ page import="org.apache.commons.fileupload.*"%>
<%@ page import="org.apache.commons.fileupload.disk.*"%>
<%@ page import="org.apache.commons.fileupload.servlet.*"%>